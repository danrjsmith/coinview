import type { Pattern, AnonymousSelectPattern, NamedSelectPattern, GuardPattern, NotPattern, GuardFunction } from './types/Pattern';
import type { Match } from './types/Match';
import { __ } from './PatternType';
export declare const when: <a, b extends a = a>(predicate: GuardFunction<a, b>) => GuardPattern<a, b>;
export declare const not: <a>(pattern: Pattern<a>) => NotPattern<a>;
export declare function select(): AnonymousSelectPattern;
export declare function select<k extends string>(key: k): NamedSelectPattern<k>;
/**
 * # Pattern matching
 **/
export { Pattern, __ };
/**
 * #### match
 *
 * Entry point to create a pattern matching expression.
 *
 * It returns a `Match` builder, on which you can chain
 * several `.with(pattern, handler)` clauses.
 */
export declare const match: <a, b = "@ts-pattern/unset">(value: a) => Match<a, b, never, never>;
